2004-09-05    <cisterni@CHIP>

	* CLIFile.cs, Enums.cs, Cursors.cs: Started the support for CLR v. 2.0
	assemblies. We have introduced the three new metadata tables (GenericParam,
	MethodSpec, and GenericParamConstraint). Still the bridge between data and
	metadata should be crossed, as well as checking the header.

2004-02-29    <cisterni@CHIP>

	* CLIFile.cs: Fixed a bug, now the label is preserved correctly between save
	and restore of a cursor.

	* OPCODES.cs: Added the list of opcodes of the runtime.
	
	* CLIFile.cs: Added the Normalize method to the ILInstruction struct to
	simplify the analisys of IL stream.

2004-02-26    <cisterni@CHIP>

	* CLIFile.cs: Major change! Move to 1.1 version. Introduced CLIFileReader
	objects caching using WeakReferences. Factory pattern is used to ensure
	caching.
	
	* CLIFile.cs: Introduced the FindMethod static method to simplify obtaining
	the method body given the MethodInfo reflection object.
	
2004-02-25    <cisterni@CHIP>

	* Cursors.cs: Added the FindToken method to MethodTableCursor to find the
	index of a method given the MethodInfo. This is useful to quickly locate
	a method within the assembly file.
	
	* CLIFile.cs: Added the possibility of acquiring the state of an ILCursor
	and restore it later through a static method. This change has required
	several changes in order to pass around the method index to the ILCursor.
	
	* Cursors.cs: MethodTableCursor changed to pass the index of the method
	table into the method body and subsequently into the ILCursor.

2003-04-25    <cisterni@CHIP>

	* CLIFile.cs: Added the cliHd private member that refers to the CLI
	file header. Added the EntryPointToken read only property that returns
	the token of the entry point.

2003-03-21    <cisterni@CHIP>

	* CLIFile.cs: ShortInlineI was erroneously treated as 2 bytes value.
	Now it is treated as a signed byte.

2003-03-12    <cisterni@CHIP>

	* CLIFile.cs (ILCursor): Added TargetsCount property to check how
	many targets have been found by TrackTargets().

2003-03-08    <cisterni@CHIP>

	* CLIFile.cs (SignatureUtil.FindType): Added a parameter to find
	types passed by ref. TypeArray and FindType has been also modified.

2003-03-06    <cisterni@CHIP>

	* CLIFile.cs (ILCursor): Added the private struct State to save and
	restore the state of the cursor. Added the saved member which is a
	Stack of States. PushState and PopState allow to save and restore the
	state of the cursor. This feature is useful for lookahead on the code.

2003-03-04    <cisterni@CHIP>

	* CLIFile.cs: Fixed a bug in IlineSwitch handling. now if TrackTargets
	is avoided the sw array is returned.

2003-03-03    <cisterni@CHIP>

	* CLIFile.cs: Added support for InlineSwitch operand type in
	TrackTargets.
	ResolveParameter has been changed to take into account also
	switches.

2003-02-24    <cisterni@CHIP>

	* CLIFile.cs: Added the path and assembly fields to CLIFileReader.
	These members are intended to address a problem in reflection.
	When assemblies are loaded using Assembly.LoadFrom Type.GetType
	returns false. We use GetType from the assembly object stored in
	assembly. To avoid unnecessary overhead the assembly field is
	instantiated only if GetType is invoked.

	* Cursors.cs: GetReflectionType() in TypeDefTableCursor has been
	changed in order to use table.CLIFile.assembly.GetType() instead
	of Type.GetType(). In this way the method works also with dynamically
	loaded assemblies.

2003-01-18    <cisterni@CHIP>

	* CLIFile.cs: ShortInlineI was considered of 2 bytes. It is now
	signed byte.

2003-01-16    <cisterni@CHIP>

	* CLIFile.cs: Bugfix in TrackTarget resolution.

	* CLIFile.cs: Bugfix in Next(), the array of labels was accessed
	past the end.

	* CLIFile.cs: Bugfix, when the branch of a target was 0 a wrong
	target position was generated.

2003-01-04    <cisterni@CHIP>

	* CLIFile.cs: TrackTargets now avoid to recalculate targets.

2002-12-19    <cisterni@CHIP>

	* CLIFile.cs: Now the par field of Instr struct is a struct with
	an explicit layout that behaves as a C union to save memory.

	* Enum.cs: Now this file is generated by OpCodesGen using Enum.cs.in as
	input file.

2002-12-18    <cisterni@CHIP>

	* CLIFile.cs: New change in the architecture of ILCursor. The cursor
	now has most of the code. There is the interface ILStoreCursor that
	abstracts the notion of cursor to the stream. This can be a mapptr or
	a cursor to an array of bytes. We pay some virtual call because of the 
	interface but it seems to be acceptable with respect to the previous
	solution. Even Generics wouldn't improve the situation.

	* CLIFile.cs: A new class ILCursor has been introduced. The ILCursor
	class is abstract and serves as base class for MapPtrILCursor and
	ByteArrayILCursor. The pair ILCursor and MapPtrILCursor corresponds to
	the previous ILCursor class. ByteArrayILCursor run across a byte array
	rather than memory and inherits from ILCursor.
	In this way we have introduced a number of virtual methods though we 
	don't believe that this would introduce any penalty in execution speed.

2002-10-21    <cisterni@CHIP>

	* Cursors.cs (SEHTableCursor): Added the Rows property that returns
	the number of rows of SEH table. The property lies here because there
	is no SEHTable. In future we may want to introduce it, though it may
	introduce unneeded overhead.

	* CLIFile.cs (SignatureUtil): The class has become public with the
	method SetTypeDefTable public and all other members internal. This
	is due to the fact that users of the library would be interested in
	setting the TypeDefTable.

	* Enums.cs (HasCustomattributeTag): Cut and past error. The 
	AssemblyRef constant was misdefined. (by Donal Lafferty)

	* CLIFile.cs (ResolveParameter): Fixed a bitmask (by Donal Lafferty)

2002-10-14    <cisterni@CHIP>

	* CLIFile.cs (SignatureUtil): Added manualTypeDefObjects and
	typeDefTable to control the FindType helper. (by Donal Lafferty).
	Modifications are useful for type lookup when CLIFile is used in 
	conjunction with System.Reflection.Emit API.  Essentially, it allows
	SignatureUtil to resolve metadata cross-references to TypeBuilder 
	objects.	

	* Cursors.cs (FieldTableCursor): Added the FieldSignature property
	to get an instance of FieldSig. (by Donal Lafferty)

	* CLIFile.cs (FieldSig): Added the class FieldSig to read Field
	signatures (by Donal Lafferty)

2002-08-27    <cisterni@CHIP>

	* CLIFIle.cs (MethodBody.Next): The case for OperandType.ShortInlineI
	has been changed from short to byte according to ECMA specs (by Donal
	Lafferty).

2002-08-12    <cisterni@CHIP>

	* Cursors.cs: Added the SEHClause and the SEHTableCursor types that 
	allow accessing exception tables in methods. (by Donal Lafferty)

	* CLIFile.cs (MethodBody): Added the SEHSection member that keeps 
	tracks of additional sections in the method body for exception 
	handling. The SEHTableCursor property allows accessing exception 
	tables. (by Donal Lafferty)

2002-08-08    <cisterni@CHIP>

	* Cursors.cs (FieldTableCursor.GetReflectionField): Bugfix from Donal
	Lafferty.

	* Cursors.cs (MethodTableCursor.GetReflectionMethod): Bugfix from
	Donal Lafferty.

2002-08-07    <cisterni@CHIP>

	* CLIFile.cs (PropertySig): Added a first implementation of
	PropertySig (by Donal Lafferty).

	* CLIFile.cs (MethodBody.MethodBody): 

        /// DL 2002-08-06
        /// Size of Fat Header is contained in bits 15 to 12 of the
        /// first WORD of the header.  The old code, commented out
        /// below, assumed the value was in bits 0 to 3.
        ///
        /// Base = new MapPtr(b, ((short)b & 0x0F) * 4);
        /// Body = new MapPtr(b + ((short)b & 0x0F) * 4, (int)(b + 4));
        Base = new MapPtr(b, ((((short)b) >> 12) & 0x0F) * 4);
        Body = new MapPtr(b + ((((short)b) >> 12) & 0x0F) * 4, (int)(b + 4));

	Bugfix from Donal Lafferty.

	* CLIFile.cs (SignatureUtil.ReadType): Now the ARRAYSZ case is handled
	(code by Donal Lafferty).

2002-08-06    <cisterni@CHIP>

	* Cursors.cs (TypeRefTableCursor.GetReflectionType): Now also the
	case for ResolutionScopeTag.TypeRef is handled (look the comment
	in the source file). Fix made by Donal Lafferty.

2002-08-04    <cisterni@CHIP>

	* CLIFile.cs: Added the Target class. This class represents
	a target instruction for a branch. The method ILCursor.MarkTargets()
	builds a list of Target under request. This list (if present) is used
	by ResolveParameter and Next methods to mark positions instead of
	showing offsets.

2002-08-03    <cisterni@CHIP>

	* CLIFile.cs (FindMethod): Added a test for .cctor name. BindingFlags 
	are also used to properly find methods. See the comment in the code
	for more information. (by Donal Lafferty).

	* Cursors.cs (GetReflectionMethod): Now it relies on GetReflectionType
	instead of GetType. (by Donal Lafferty).

	* Cursors.cs (GetReflectionField): Added specification of BindingFlags
	to the GetField to capture also non public instance fields. (by Donal
	Lefferty).

	* CliFile.cs (ResolveParameter): In some cases the parameter was not
	stripped using 0x00ffffff mask (fix by Donal Lafferty).

2002-08-02    <cisterni@CHIP>

	* CLIFile.cs (ResolveParameter): Fixed several problems in associating
	System.Reflection objects to tokens.

2002-08-01    <cisterni@CHIP>

	* CLIFile.cs (MethodSig.FindMethod): MethodBase is returned instead
	of MethodInfo.

	* Cursors.cs (MethodTableCursor.GetReflectionMethod): Now a MethodBase
	is returned because a method could be either a MethodInfo or a
	ConstructorInfo.

2002-07-31    <cisterni@CHIP>

	* Cursors.cs (GetReflectionType): Added modification made by Donal
	Lafferty (laffertd@cs.tcd.ie) to GetReflectionType() method.

	* ChangeLog creation. The library is able to read almost all metadata
	in a CLI file and the IL instruction stream with some limitation.
