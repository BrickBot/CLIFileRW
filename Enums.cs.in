/// ------------------------------------------------------------
/// Copyright (c) 2002-2008 Antonio Cisternino (cisterni@di.unipi.it)
/// 
/// File: Enums.cs
/// Author: Antonio Cisternino (cisterni@di.unipi.it)
/// 
/// The use and distribution terms for this software are 
/// contained in the file named license.txt, which can be found 
/// in the root of this distribution.
/// By using this software in any fashion, you are agreeing to 
/// be bound by the terms of this license.
///
/// You must not remove this notice, or any other, from this
/// software.
/// ------------------------------------------------------------

using System;
using System.Collections;
using System.Reflection.Emit;
using MappedView;

namespace CLIFile {
  /// <summary>
  /// Name and ID of tables.
  /// </summary>
  public enum TableNames {
    Module = 0x00,
    TypeRef = 0x01,
    TypeDef = 0x02,
    Field = 0x04,
    Method = 0x06,
    Param = 0x08,
    InterfaceImpl = 0x09,
    MemberRef = 0x0A,
    Constant = 0x0B,
    CustomAttribute = 0x0C,
    FieldMarshal = 0x0D,
    DeclSecurity = 0x0E,
    ClassLayout = 0x0F,
    FieldLayout = 0x10,
    StandAloneSig = 0x11,
    EventMap = 0x12,
    Event = 0x14,
    PropertyMap = 0x15,
    Property = 0x17,
    MethodSemantics = 0x18,
    MethodImpl = 0x19,
    ModuleRef = 0x1A,
    TypeSpec = 0x1B,
    ImplMap = 0x1C,
    FieldRVA = 0x1D,
    Assembly = 0x20,
    AssemblyProcessor = 0x21,
    AssemblyOS = 0x22,
    AssemblyRef = 0x23,
    AssemblyRefProcessor = 0x24,
    AssemblyRefOS = 0x25,
    File = 0x26,
    ExportedType = 0x27,
    ManifestResource = 0x28,
    NestedClass = 0x29,
		GenericParam = 0x2A,
		MethodSpec = 0x2B,
		GenericParamConstraint = 0x2C,
    MaxNum = 0x2D
  }

  /// <summary>
  /// TypeDefOrRef Tag
  /// </summary>
  internal enum TypeDefOrRefTag {
    TypeDef = 0x00,
    TypeRef = 0x01,
    TypeSpec = 0x02,
		BaseType = 0x03
  }

  /// <summary>
  /// HasContent Tag
  /// </summary>
  internal enum HasConstantTag {
    FieldDef = 0x00,
    ParamDef = 0x01,
    Property = 0x02
  }

  /// <summary>
  /// HasCustomAttribute Tag
  /// </summary>
  internal enum HasCustomattributeTag {
    MethodDef = 0x00,
    FieldDef = 0x01,
    TypeRef	= 0x02,
    TypeDef	= 0x03,
    ParamDef = 0x04,
    InterfaceImpl = 0x05,
    MemberRef = 0x06,
    Module = 0x07,
    Permission = 0x08,
    Property = 0x09,
    Event = 0x0A,
    Signature = 0x0B,
    ModuleRef = 0x0C,
    TypeSpec = 0x0D,
    Assembly = 0x0E,
    AssemblyRef = 0x0F,
    File = 0x10,
    ExportedType = 0x11,
    ManifestResource = 0x12
  }

  /// <summary>
  /// HasFieldMarshal Tag
  /// </summary>
  internal enum HasFieldMarshalTag {
    FieldDef = 0x00,
    ParamDef = 0x01
  }

  /// <summary>
  /// HasDeclSecurity Tag
  /// </summary>
  internal enum HasDeclSecurityTag {
    TypeDef = 0x00,
    MethodDef = 0x01,
    Assembly = 0x02
  }

  /// <summary>
  /// MemberRefParent Tag
  /// </summary>
  internal enum MemberRefParentTag {
    NotUsed = 0x00,
    TypeRef = 0x01,
    ModuleRef = 0x02,
    MethodDef = 0x03,
    TypeSpec = 0x04
  }

  /// <summary>
  /// HasSemantics Tag
  /// </summary>
  internal enum HasSemanticsTag {
    Event = 0x00,
    Property = 0x01
  }

  /// <summary>
  /// MethodDefOrRef Tag
  /// </summary>
  internal enum MethodDefOrRefTag {
    MethodDef = 0x00,
    MemberRef = 0x01
  }

  /// <summary>
  /// MemberForwarded Tag
  /// </summary>
  internal enum MemberForwardedTag {
    FieldDef = 0x00,
    MethodDef = 0x01
  }

  /// <summary>
  /// Implementation Tag
  /// </summary>
  internal enum ImplementationTag {
    File = 0x00,
    AssemblyRef = 0x01,
    ExportedType = 0x02
  }

  /// <summary>
  /// CustomAttributeType Tag
  /// </summary>
  internal enum CustomAttributeTypeTag {
    NotUsed = 0x00,
    NotUsed2 = 0x01,
    MethodDef = 0x02,
    MemberRef = 0x03,
    NotUsed3 = 0x04
  }

  /// <summary>
  /// ResolutionScope Tag
  /// </summary>
  internal enum ResolutionScopeTag {
    Module = 0x00,
    ModuleRef = 0x01,
    AssemblyRef = 0x02,
    TypeRef	= 0x03
  }

  /// <summary>
  /// Used by signature blobs.
  /// </summary>
  internal enum ELEMENT_TYPE {
    ELEMENT_TYPE_END = 0x00, // Marks end of a list
    ELEMENT_TYPE_VOID  = 0x01,
    ELEMENT_TYPE_BOOLEAN  = 0x02,
    ELEMENT_TYPE_CHAR  = 0x03,
    ELEMENT_TYPE_I1  = 0x04,
    ELEMENT_TYPE_U1  = 0x05,
    ELEMENT_TYPE_I2  = 0x06,
    ELEMENT_TYPE_U2  = 0x07,
    ELEMENT_TYPE_I4  = 0x08,
    ELEMENT_TYPE_U4  = 0x09,
    ELEMENT_TYPE_I8  = 0x0a,
    ELEMENT_TYPE_U8  = 0x0b,
    ELEMENT_TYPE_R4  = 0x0c,
    ELEMENT_TYPE_R8  = 0x0d,
    ELEMENT_TYPE_STRING = 0x0e,
    ELEMENT_TYPE_PTR = 0x0f, // Followed by <type> token
    ELEMENT_TYPE_BYREF  = 0x10, // Followed by <type> token
    ELEMENT_TYPE_VALUETYPE  = 0x11, // Followed by <type> token
    ELEMENT_TYPE_CLASS  = 0x12, // Followed by <type> token
    ELEMENT_TYPE_VAR = 0x13,     // a class type variable VAR <U1>
    ELEMENT_TYPE_ARRAY = 0x14, // <type> <rank> <boundsCount> <bound1> … <loCount> <lo1> …
    ELEMENT_TYPE_GENERICINST = 0x15,     // instantiated type
    ELEMENT_TYPE_TYPEDBYREF = 0x16,
    ELEMENT_TYPE_I = 0x18, // System.IntPtr
    ELEMENT_TYPE_U  = 0x19, // System.UIntPtr
    ELEMENT_TYPE_FNPTR = 0x1b, // Followed by full method signature
    ELEMENT_TYPE_OBJECT = 0x1c, // System.Object
    ELEMENT_TYPE_SZARRAY = 0x1d, // Single-dim array with 0 lower bound
    ELEMENT_TYPE_MVAR = 0x1e,     // a method type variable MVAR <U1>
    ELEMENT_TYPE_CMOD_REQD = 0x1f, // Required modifier : followed by a TypeDef or TypeRef token
    ELEMENT_TYPE_CMOD_OPT = 0x20, // Optional modifier : followed by a TypeDef or TypeRef token
    ELEMENT_TYPE_INTERNAL = 0x21, // Implemented within the CLI

    // Note that this is the max of base type excluding modifiers
    ELEMENT_TYPE_MAX = 0x22,     // first invalid element type
 
    ELEMENT_TYPE_MODIFIER = 0x40, // Or'd with following element types
    ELEMENT_TYPE_SENTINEL = 0x41, // Sentinel for varargs method signature
    ELEMENT_TYPE_PINNED = 0x45 // Denotes a local variable that points at a pinned object
  }

  public enum CorTokenType {
    mdtModule = 0x00000000,
    mdtTypeRef = 0x01000000,
    mdtTypeDef = 0x02000000,
    mdtFieldDef = 0x04000000,
    mdtMethodDef = 0x06000000,
    mdtParamDef = 0x08000000,
    mdtInterfaceImpl = 0x09000000,
    mdtMemberRef = 0x0a000000,
    mdtCustomAttribute = 0x0c000000,
    mdtPermission = 0x0e000000,
    mdtSignature = 0x11000000,
    mdtEvent = 0x14000000,
    mdtProperty = 0x17000000,
    mdtModuleRef = 0x1a000000,
    mdtTypeSpec = 0x1b000000,
    mdtAssembly = 0x20000000,
    mdtAssemblyRef = 0x23000000,
    mdtFile = 0x26000000,
    mdtExportedType = 0x27000000,
    mdtManifestResource = 0x28000000,
    mdtGenericParam = 0x2a000000,
    mdtMethodSpec = 0x2b000000,
    mdtGenericParamConstraint = 0x2c000000,

    mdtString = 0x70000000,
    mdtName = 0x71000000,
    mdtBaseType = 0x72000000,       // Leave this on the high end value. This does not correspond to metadata table
  }


  /// <summary>
  /// This class is used to map opcodes into OpCode objects.
  /// </summary>
  internal class OpCodesMap {
    public static OpCode[] LowCodes;
    public static OpCode[] HighCodes;

    static OpCodesMap() {
